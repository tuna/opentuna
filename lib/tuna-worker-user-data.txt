Content-Type: multipart/mixed; boundary="//"
MIME-Version: 1.0

--//
Content-Type: text/cloud-config; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.txt"

#cloud-config
repo_update: true
repo_upgrade: all
packages:
 - nfs-utils
 - amazon-efs-utils
 - python3-pip
 - git
 - awscli
 - docker
 - amazon-cloudwatch-agent
 - gcc
 - python3-devel

# run commands
runcmd:
 - file_system_id_1={{&fileSystemId}}
 - efs_mount_point_1={{&repoRoot}}
 - mkdir -p "${efs_mount_point_1}"
 - test -f "/sbin/mount.efs" && echo "${file_system_id_1}:/ ${efs_mount_point_1} efs tls,_netdev" >> /etc/fstab || echo "${file_system_id_1}.{{&regionEndpoint}}:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0" >> /etc/fstab
 - test -f "/sbin/mount.efs" && echo -e "\n[client-info]\nsource=liw" >> /etc/amazon/efs/efs-utils.conf
 - mount -a -t efs,nfs4 defaults
 - tunaversion=v0.7.0
 - tunafile="${efs_mount_point_1}/tunasync/install/tunasync-linux-amd64-bin-${tunaversion}.tar.gz"
 - (test -f ${tunafile} && tar -xf ${tunafile} -C /usr/local/bin/) || (wget -t 20 --retry-connrefused -w 5 -T 10 -c https://github.com/tuna/tunasync/releases/download/${tunaversion}/tunasync-linux-amd64-bin.tar.gz -O - | tar xzf -  -C /usr/local/bin/)
 - amazon-linux-extras install python3.8
 - export PIP_DEFAULT_TIMEOUT=20; pip3.8 install -i https://pypi.tuna.tsinghua.edu.cn/simple 'bandersnatch==5.3.0' 'packaging==21.3' || pip3.8 install -i https://pypi.douban.com/simple 'bandersnatch==5.3.0' 'packaging==21.3'
 - tunascript_bin="${efs_mount_point_1}/tunasync/install/tunasync-scripts.tar.gz"
 - tunascriptpath={{&tunaScriptPath}}
 - mkdir -p ${tunascriptpath}
 - (test -f ${tunascript_bin} && tar -xf ${tunascript_bin} -C ${tunascriptpath}) || (git clone https://github.com/tuna/tunasync-scripts.git ${tunascriptpath})

cloud_final_modules:
- [scripts-user, always]
--//
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="userdata.txt"

#!/bin/bash -xe
which bandersnatch || exit 10 # mandantory checking bandersnatch installed
HOSTNAME=`hostname`
MANAGERURL="{{&managerUrl}}"
TUNA_REPO_BUCKET="{{&tunaRepoBucket}}"
mkdir -p /etc/tunasync/

export AWS_DEFAULT_REGION={{&region}}

# create tunasync work config
aws s3 cp {{&tunasyncWorkerConf}} /etc/tunasync/worker.conf
sed -i "s|++HOSTNAME++|$HOSTNAME|g" /etc/tunasync/worker.conf
sed -i "s|++MANAGERURL++|$MANAGERURL|g" /etc/tunasync/worker.conf
sed -i "s|++TUNA_REPO_BUCKET++|$TUNA_REPO_BUCKET|g" /etc/tunasync/worker.conf

# create tunasync service
cat > /usr/lib/systemd/system/tunasync.service << EOF
[Unit]
Description=Tunasync Worker daemon

[Service]
ExecStart=/usr/local/bin/tunasync worker -config /etc/tunasync/worker.conf
ExecReload=/bin/kill -HUP \$MAINPID
Type=simple
KillMode=control-group
Restart=on-failure
RestartSec=20s
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=tunasync

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/rsyslog.d/tunasync.conf << EOF
if \$programname == 'tunasync' then /var/log/tunasync.log
& stop
EOF

# setup rubygems script
aws s3 cp {{&rubygemsScript}} {{&tunaScriptPath}}/rubygems-s3.sh
chmod +x {{&tunaScriptPath}}/rubygems-s3.sh

# start tunasync service
systemctl daemon-reload
systemctl restart rsyslog
systemctl enable tunasync.service
systemctl start tunasync.service
systemctl enable docker.service
systemctl start docker.service

# configure conf json of CloudWatch agent
mkdir -p /opt/aws/amazon-cloudwatch-agent/etc/
aws s3 cp {{&cloudwatchAgentConf}} /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

# start cloudwatch agent
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s &
--//